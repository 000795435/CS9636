--- a simple MLS Library in Javascript ---

- only implement MLS for a text-based messaging platform

- not all functions described in the doc need to be implemented
   - functions to skip:
   -  3.3. External Joins - focus on private groups; external joins are a feature mostly for public groups
   -  5.3.2. Credential Expiry and Revocation - as outlined in the section, clients with expired credentials
   -  5.3.3. Uniquely Identifying Clients - not a critical requirement; can be ommitted in a simple implementation
will likely be accepted in a lot of cases. In a simplified implementation, we can simply choose not to worry about expiration.



Proposal types(section 7):
0x0001 - add
0x0002 - update
0x0003 - remove
0x0004 - psk
0x0005 - reinit
0x0006 - external_init
0x0007 - group_context_extensions

Extension types:
0x0001 - application_id
0x0002 - ratchet_tree
0x0003 - required_capabilities
0x0004 - external_pub
0x0005 - external_senders

Requirements from Section 14(only implement if we have time):

- Applications MUST have an established way to resolve conflicting Commit messages for the same epoch. 
  - can either prevent conflicting messages from occurring in the first place, 
  - or develop rules for deciding which Commit out of several sent in an epoch will be canonical. 
The approach chosen MUST minimize the amount of time that forked or previous group states are kept in memory, and promptly delete them once they're no longer necessary
to ensure forward secrecy.
- The generation of Commit messages MUST NOT modify a client's state, 
since the client doesn't know at that time whether the changes implied by the Commit message will conflict with another Commit or not. 
- Similarly, the Welcome message corresponding to a Commit MUST NOT be delivered to a new joiner until it's clear that the Commit has been accepted.

From Section 15:
- Applications SHOULD also define a policy limiting the maximum number of steps that clients will move the ratchet forward in response to a new message. 
- Messages received with a generation counter that is too much higher than the last message received would then be rejected. 
This avoids causing a denial-of-service attack by requiring the recipient to perform an excessive number of key derivations. 
For example, a malicious group member could send a message with generation = 0xffffffff at the beginning of a new epoch, 
forcing recipients to perform billions of key derivations unless they apply limits of the type discussed above.

relevant docs:

https://www.rfc-editor.org/rfc/rfc9420.html

https://github.com/dajiaji/hpke-js (Open Source HPKE implementation; can be used to handle encryption)

https://docs.rs/openmls/latest/openmls/ (Rust implemenation; use as a reference ONLY)
https://github.com/cisco/mlspp (C++ implementation; use as a reference ONLY)
